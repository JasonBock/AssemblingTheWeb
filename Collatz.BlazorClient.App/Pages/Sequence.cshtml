@using AspNetMonsters.Blazor.Geolocation
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends

@page "/sequence"
@inject LocationService  LocationService

<h1>Collatz</h1>

<p>Calculations are being made at:</p>
<ul>
    <li>Latitude: @location?.Latitude</li>
    <li>Longitude: @location?.Longitude</li>
    <li>Accuracy: @location?.Accuracy</li>
</ul>
<!--From https://www.bing.com/maps/embed-a-map-->
<div>
    <iframe width="500" height="400" frameborder="0" src="@bingMainUrl" scrolling="no"></iframe>
    <div style="white-space: nowrap; text-align: center; width: 500px; padding: 6px 0;">
        <a id="largeMapLink" href="@bingLargeMapUrl" target="_blank">View Larger Map</a> &nbsp; | &nbsp;
        <a id="dirMapLink" href="@bingDirectionsUrl" target="_blank">Get Directions</a>
    </div>
</div>
<input type="text" bind="@value" />
<button class="btn btn-primary" onclick="@CalculateSequence">Calculate Sequence</button>
<p>Latest Sequence: @latestSequence</p>
<ChartJsLineChart ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300" />

@functions {
   string value = default;
   string latestSequence = string.Empty;
   Location location;
   string bingMainUrl = default;
   string bingLargeMapUrl = default;
   string bingDirectionsUrl = default;
   LineChartConfig lineChartConfig;
   ChartJsLineChart lineChartJs;

   protected override void OnInit()
   {
       lineChartConfig = lineChartConfig ?? new LineChartConfig
       {
           CanvasId = "CollatzChart",
           Options = new LineChartOptions
           {
               Text = "Sequence",
               Display = true,
               Responsive = true,
               Title = new OptionsTitle { Display = true, Text = "Sequence" },
               Legend = new Legend
               {
                   Position = LegendPosition.BOTTOM.ToString(),
                   Labels = new Labels
                   {
                       UsePointStyle = true
                   }
               },
               Tooltips = new Tooltips
               {
                   Mode = Mode.nearest,
                   Intersect = false
               },
               Scales = new Scales
               {
                   xAxes = new List<Axis>
                    {
                        new Axis
                        {
                            Display = "xAxesDisplay",
                            ScaleLabel = new ScaleLabel
                            {
                                Display = ".",
                                LabelString = "Position"
                            }
                        }
                    },
                   yAxes = new List<Axis>
                    {
                        new Axis
                        {
                            Display = "yAxes",
                            ScaleLabel = new ScaleLabel
                            {
                                Display = "..",
                                LabelString = "Value"
                            }
                        }
                    }
               },
               Hover = new LineChartOptionsHover
               {
                   Intersect = true,
                   Mode = Mode.nearest
               }
           }
       };
   }

   protected override async Task OnInitAsync()
   {
       location = await LocationService.GetLocationAsync();
       bingMainUrl = $"https://www.bing.com/maps/embed?h=400&w=500&cp={location.Latitude}~{location.Longitude}&lvl=11&typ=d&sty=r&src=SHELL&FORM=MBEDV8";
       bingLargeMapUrl = $"https://www.bing.com/maps?cp={location.Latitude}~{location.Longitude}&amp;sty=r&amp;lvl=11&amp;FORM=MBEDLD";
       bingDirectionsUrl = $"https://www.bing.com/maps/directions?cp={location.Latitude}~-{location.Longitude}&amp;sty=r&amp;lvl=11&amp;rtp=~pos.{location.Latitude}_{location.Longitude}____&amp;FORM=MBEDLD";
   }

   protected override void OnAfterRender()
   {
       lineChartJs.Reload();
   }

   void CalculateSequence()
   {
       if (BigInteger.TryParse(value, out var number))
       {
           var sequence = new CollatzSequence(number).Sequence;
           latestSequence = string.Join(", ", sequence);
           lineChartConfig.Data = new LineChartData
           {
               Datasets = new List<LineChartDataset>
                {
                    new LineChartDataset
                    {
                        BackgroundColor = "#ff6384",
                        BorderColor = "#ff6384",
                        Fill = false,
                        Label = "Value",
                        BorderWidth = 2,
                        PointRadius = 3,
                        PointBorderWidth = 1,
                        Data = sequence.Select(_ => (object)(ulong)_).ToList()
                    }
                },
               Labels = Enumerable.Range(1, sequence.Length).Select(_ => _.ToString()).ToList()
           };
           lineChartJs.Reload();
       }
       else
       {
           latestSequence = $"{value} is not a valid BigInteger.";
       }
   }
}